diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2cc2da0..ba1f377 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -95,6 +95,8 @@ set_package_properties(Wayland PROPERTIES
                        TYPE REQUIRED
                        PURPOSE "Required for building screenlocker")
 
+find_package(KJieba REQUIRED)
+
 include(ConfigureChecks.cmake)
 
 include_directories("${CMAKE_CURRENT_BINARY_DIR}")
diff --git a/runners/services/CMakeLists.txt b/runners/services/CMakeLists.txt
index 6107256..be6d0d8 100644
--- a/runners/services/CMakeLists.txt
+++ b/runners/services/CMakeLists.txt
@@ -10,6 +10,7 @@ target_link_libraries(krunner_services
     KF5::I18n
     KF5::Runner
     KF5::Service
+    KJieba::KJieba
 )
 
 install(TARGETS krunner_services DESTINATION ${KDE_INSTALL_PLUGINDIR} )
diff --git a/runners/services/servicerunner.cpp b/runners/services/servicerunner.cpp
index eb50ead..42bc934 100644
--- a/runners/services/servicerunner.cpp
+++ b/runners/services/servicerunner.cpp
@@ -26,8 +26,8 @@
 #include <QUrl>
 #include <KLocalizedString>
 #include <KRun>
-#include <KService>
 #include <KServiceTypeTrader>
+#include <KServiceOffer>
 
 ServiceRunner::ServiceRunner(QObject *parent, const QVariantList &args)
     : Plasma::AbstractRunner(parent, args)
@@ -38,10 +38,14 @@ ServiceRunner::ServiceRunner(QObject *parent, const QVariantList &args)
     setPriority(AbstractRunner::HighestPriority);
 
     addSyntax(Plasma::RunnerSyntax(":q:", i18n("Finds applications whose name or description match :q:")));
+
+    kjieba = new KJieba::KJiebaInterface;
 }
 
 ServiceRunner::~ServiceRunner()
 {
+    delete kjieba;
+    kjieba = NULL;
 }
 
 QStringList ServiceRunner::categories() const
@@ -63,7 +67,6 @@ QIcon ServiceRunner::categoryIcon(const QString& category) const
     return Plasma::AbstractRunner::categoryIcon(category);
 }
 
-
 void ServiceRunner::match(Plasma::RunnerContext &context)
 {
     const QString term = context.query();
@@ -73,11 +76,24 @@ void ServiceRunner::match(Plasma::RunnerContext &context)
     QString query;
 
     if (term.length() > 1) {
-        // Search for applications which are executable and case-insensitively match the search term
-        // See http://techbase.kde.org/Development/Tutorials/Services/Traders#The_KTrader_Query_Language
-        // if the following is unclear to you.
-        query = QString("exist Exec and ('%1' =~ Name)").arg(term);
-        KService::List services = KServiceTypeTrader::self()->query("Application", query);
+        KService::List services;
+        const KServiceOfferList offers = KServiceTypeTrader::weightedOffers("Application");
+
+        KServiceOfferList::const_iterator itOff = offers.begin();
+        for (; itOff != offers.end(); ++itOff) {
+            services.append((*itOff).service());
+        }
+
+        KService::List::iterator it = services.begin();
+        while (it != services.end()) {
+            if (!kjieba->query((*it)->name()).contains(term) && 
+                !kjieba->topinyin((*it)->name()).contains(term) && 
+                !kjieba->topinyin((*it)->name(), KJieba::INIT).contains(term)) {
+                it = services.erase(it);
+            } else {
+                ++it;
+            }
+        }
 
         if (!services.isEmpty()) {
             //qDebug() << service->name() << "is an exact match!" << service->storageId() << service->exec();
diff --git a/runners/services/servicerunner.h b/runners/services/servicerunner.h
index a4171bc..b97a8a7 100644
--- a/runners/services/servicerunner.h
+++ b/runners/services/servicerunner.h
@@ -19,11 +19,9 @@
 #ifndef SERVICERUNNER_H
 #define SERVICERUNNER_H
 
-
 #include <KService>
-
-//#include <KRunner/AbstractRunner>
 #include <krunner/abstractrunner.h>
+#include <KJieba/KJieba_Interface>
 
 /**
  * This class looks for matches in the set of .desktop files installed by
@@ -50,6 +48,9 @@ class ServiceRunner : public Plasma::AbstractRunner
 
     protected:
         void setupMatch(const KService::Ptr &service, Plasma::QueryMatch &action);
+
+    private:
+        KJieba::KJiebaInterface *kjieba;
 };
 
 
