diff --git a/CMakeLists.txt b/CMakeLists.txt
index 74e1518..b79742e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -100,6 +100,19 @@ set_package_properties(KF5Wayland PROPERTIES
                        TYPE REQUIRED
                        PURPOSE "Required for Wayland integration of plasmashell")
 
+find_package(KJieba)
+set_package_properties(KJieba PROPERTIES
+    DESCRIPTION "Qt-style API to use yanyiwu's libcppjieba Chinese word segmentation DBus service"
+    URL "https://github.com/isoft-linux/kjieba"
+    TYPE OPTIONAL
+    PURPOSE "Use libcppjieba to segment Chinese word"
+)
+set(HAVE_KJIEBA FALSE)
+if (KJieba_FOUND)
+    add_definitions(-DHAVE_KJIEBA)
+    set(HAVE_KJIEBA TRUE)
+endif()
+
 include(ConfigureChecks.cmake)
 
 include_directories("${CMAKE_CURRENT_BINARY_DIR}")
diff --git a/runners/services/CMakeLists.txt b/runners/services/CMakeLists.txt
index 7e33a3e..4c61517 100644
--- a/runners/services/CMakeLists.txt
+++ b/runners/services/CMakeLists.txt
@@ -13,6 +13,10 @@ target_link_libraries(krunner_services
     KF5::Activities
 )
 
+if(HAVE_KJIEBA)
+    target_link_libraries(krunner_services KJieba::KJieba)
+endif()
+
 install(TARGETS krunner_services DESTINATION ${KDE_INSTALL_PLUGINDIR} )
 
 install(FILES plasma-runner-services.desktop DESTINATION ${KDE_INSTALL_KSERVICES5DIR})
diff --git a/runners/services/servicerunner.cpp b/runners/services/servicerunner.cpp
index aa9d2bd..1c3a501 100644
--- a/runners/services/servicerunner.cpp
+++ b/runners/services/servicerunner.cpp
@@ -40,10 +40,20 @@ ServiceRunner::ServiceRunner(QObject *parent, const QVariantList &args)
     setPriority(AbstractRunner::HighestPriority);
 
     addSyntax(Plasma::RunnerSyntax(QStringLiteral(":q:"), i18n("Finds applications whose name or description match :q:")));
+
+#if HAVE_KJIEBA
+    kjieba = new KJieba::KJiebaInterface;
+#endif
 }
 
 ServiceRunner::~ServiceRunner()
 {
+#if HAVE_KJIEBA
+    if (kjieba) {
+        delete kjieba;
+        kjieba = nullptr;
+    }
+#endif
 }
 
 QStringList ServiceRunner::categories() const
@@ -75,11 +85,29 @@ void ServiceRunner::match(Plasma::RunnerContext &context)
     QString query;
 
     if (term.length() > 1) {
+#if HAVE_KJIEBA
+        KService::List services = KServiceTypeTrader::self()->query("Application");
+        KService::List::iterator it = services.begin();
+        while (it != services.end()) {
+            if ((*it)->exec().isEmpty() ||
+                (!kjieba->query((*it)->genericName()).contains(term) &&
+                 !kjieba->topinyin((*it)->genericName()).contains(term) &&
+                 !kjieba->topinyin((*it)->genericName(), false).contains(term) &&
+                 !kjieba->query((*it)->name()).contains(term) &&
+                 !kjieba->topinyin((*it)->name()).contains(term) &&
+                 !kjieba->topinyin((*it)->name(), false).contains(term))) {
+                it = services.erase(it);
+            } else {
+                ++it;
+            }
+        }
+#else
         // Search for applications which are executable and case-insensitively match the search term
         // See http://techbase.kde.org/Development/Tutorials/Services/Traders#The_KTrader_Query_Language
         // if the following is unclear to you.
         query = QStringLiteral("exist Exec and ('%1' =~ Name)").arg(term);
         KService::List services = KServiceTypeTrader::self()->query(QStringLiteral("Application"), query);
+#endif
 
         if (!services.isEmpty()) {
             //qDebug() << service->name() << "is an exact match!" << service->storageId() << service->exec();
diff --git a/runners/services/servicerunner.h b/runners/services/servicerunner.h
index 8d9ad1a..41ef3b7 100644
--- a/runners/services/servicerunner.h
+++ b/runners/services/servicerunner.h
@@ -22,8 +22,10 @@
 
 #include <KService>
 
-//#include <KRunner/AbstractRunner>
 #include <krunner/abstractrunner.h>
+#if HAVE_KJIEBA
+#include <KJieba/KJieba_Interface>
+#endif
 
 /**
  * This class looks for matches in the set of .desktop files installed by
@@ -50,6 +52,11 @@ class ServiceRunner : public Plasma::AbstractRunner
 
     protected:
         void setupMatch(const KService::Ptr &service, Plasma::QueryMatch &action);
+
+#if HAVE_KJIEBA
+    private:
+        KJieba::KJiebaInterface *kjieba = nullptr;
+#endif
 };
 
 
