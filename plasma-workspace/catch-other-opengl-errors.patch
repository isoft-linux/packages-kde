diff --git a/shell/main.cpp b/shell/main.cpp
index a774cb4e8d18032ff3fd39892b8171b96a94cc92..54f4bd655efb9364aed66d27b9b10708d1e324c3 100644
--- a/shell/main.cpp
+++ b/shell/main.cpp
@@ -40,9 +40,12 @@ void plasmaMessageHandler(QtMsgType type, const QMessageLogContext &context, con
     //if we get an openGL error, display it properly in a user visible way.
     //Qt qFatals when failing to make an openGL context; we can't catch that earlier, so we do it in the error handler and display an error message
     //otherwise we continually get bug reports
-    if (type == QtFatalMsg && message == QLatin1String("Could not initialize GLX")) {
-        QCoreApplication::setAttribute(Qt::AA_ForceRasterWidgets);
-        QMessageBox::critical(nullptr, i18n("Plasma Failed To Start"), i18n("Plasma is unable to start as it could not correctly use OpenGL 2.\nPlease check that your graphic drivers are set up correctly."));
+    if (Q_UNLIKELY(type == QtFatalMsg)) {
+            if (message == QLatin1String("Could not initialize GLX") ||
+                    message == QLatin1String("QXcbIntegration: Cannot create platform OpenGL context, neither GLX nor EGL are enabled")) {
+                QCoreApplication::setAttribute(Qt::AA_ForceRasterWidgets);
+                QMessageBox::critical(nullptr, i18n("Plasma Failed To Start"), i18n("Plasma is unable to start as it could not correctly use OpenGL 2.\nPlease check that your graphic drivers are set up correctly."));
+        }
     }
 
     //we have to reimplement the behaviour of the default message handler, as now we are always overriding it, and there's no way to access it
