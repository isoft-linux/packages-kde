diff -Nur kwallet-5.11.0/src/runtime/kwalletd/main.cpp kwallet-5.11.0new/src/runtime/kwalletd/main.cpp
--- kwallet-5.11.0/src/runtime/kwalletd/main.cpp	2015-06-06 21:29:10.000000000 +0000
+++ kwallet-5.11.0new/src/runtime/kwalletd/main.cpp	2015-07-08 23:40:56.548132877 +0000
@@ -26,10 +26,23 @@
 #include <KConfigGroup>
 #include <KDBusService>
 
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <unistd.h>
+
 #include "kwalletd.h"
 #include "kwalletd_version.h"
 #include "migrationagent.h"
 
+#include "backend/kwalletbackend.h" //For the hash size
+
+
+#define BSIZE 1000
+static int pipefd = 0;
+static int socketfd = 0;
+
 static bool isWalletEnabled()
 {
     KConfig cfg("kwalletrc");
@@ -37,12 +50,108 @@
     return walletGroup.readEntry("Enabled", true);
 }
 
+
+//Waits until the PAM_MODULE sends the hash
+static char *waitForHash()
+{
+    printf("kwalletd: Waiting for hash on %d-\n", pipefd);
+    int totalRead = 0;
+    int readBytes = 0;
+    int attemps = 0;
+    char *buf = (char*)malloc(sizeof(char) * PBKDF2_SHA512_KEYSIZE);
+    memset(buf, '\0', PBKDF2_SHA512_KEYSIZE);
+    while(totalRead != PBKDF2_SHA512_KEYSIZE) {
+        readBytes = read(pipefd, buf + totalRead, PBKDF2_SHA512_KEYSIZE - totalRead);
+        if (readBytes == -1 || attemps > 5) {
+            free(buf);
+            return NULL;
+        }
+        totalRead += readBytes;
+        ++attemps;
+    }
+    close(pipefd);
+    return buf;
+}
+
+//Waits until startkde sends the environment variables
+static int waitForEnvironment()
+
+{
+    printf("kwalletd: waitingForEnvironment on: %d\n", socketfd);
+    int s2;
+    socklen_t t;
+    struct sockaddr_un remote;
+    if ((s2 = accept(socketfd, (struct sockaddr *)&remote, &t)) == -1) {
+        fprintf(stdout, "kwalletd: Couldn't accept incoming connection\n");
+        return -1;
+    }
+    printf("kwalletd: client connected\n");
+    char str[BSIZE];
+    memset(str, '\0', sizeof(char) * BSIZE);
+    int chop = 0;
+    FILE *s3 = fdopen(s2, "r");
+    while(!feof(s3)) {
+        if (fgets(str, BSIZE, s3)) {
+            chop = strlen(str) - 1;
+            str[chop] = '\0';
+            putenv(strdup(str));
+        }
+    }
+    printf("kwalletd: client disconnected\n");
+    close(socketfd);
+    return 1;
+}
+
+char* checkPamModule(int argc, char **argv)
+{
+    printf("Checking for pam module\n");
+    char *hash = NULL;
+    int x = 1;
+    for (; x < argc; ++x) {
+        if (strcmp(argv[x], "--pam-login") != 0) {
+            continue;
+        }
+        printf("Got pam-login\n");
+        argv[x] = NULL;
+        x++;
+        //We need at least 2 extra arguments after --pam-login
+        if (x + 1 > argc) {
+            printf("Invalid arguments (less than needed)\n");
+            return NULL;
+        }
+        //first socket for the hash, comes from a pipe
+        pipefd = atoi(argv[x]);
+        argv[x] = NULL;
+        x++;
+        //second socket for environemtn, comes from a localsock
+        socketfd = atoi(argv[x]);
+        argv[x] = NULL;
+        break;
+    }
+    if (!pipefd || !socketfd) {
+        printf("Lacking a socket, pipe: %d, env:%d\n", pipefd, socketfd);
+        return NULL;
+    }
+    hash = waitForHash();
+    if (hash == NULL || waitForEnvironment() == -1) {
+        printf("Hash or environment not received\n");
+        return NULL;
+    }
+    return hash;
+}
+
+
 #ifdef HAVE_KF5INIT
 extern "C" Q_DECL_EXPORT int kdemain(int argc, char **argv)
 #else
 int main(int argc, char **argv)
 #endif
 {
+    char *hash = NULL;
+    if (getenv("PAM_KWALLET_LOGIN")) {
+        hash = checkPamModule(argc, argv);
+    }
+
     QApplication app(argc, argv);
     // this kwalletd5 program should be able to start with KDE4's kwalletd
     // using kwalletd name would prevent KDBusService unique instance to initialize
@@ -88,5 +197,15 @@
     }
 
     qDebug() << "kwalletd5 started";
+    if (hash) {
+        qDebug() << "LOGIN INSIDE!";
+        QByteArray passHash(hash, PBKDF2_SHA512_KEYSIZE);
+        int wallet = walletd.pamOpen(KWallet::Wallet::LocalWallet(), passHash, 0);
+        qDebug() << "Wallet handler: " << wallet;
+        free(hash);
+    } else {
+        qDebug() << "Not pam login";
+    }
+
     return app.exec();
 }
