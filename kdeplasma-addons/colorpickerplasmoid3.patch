diff --git a/applets/CMakeLists.txt b/applets/CMakeLists.txt
index c60c350..2e29bbe 100644
--- a/applets/CMakeLists.txt
+++ b/applets/CMakeLists.txt
@@ -1,6 +1,7 @@
 add_subdirectory(fifteenPuzzle)
 add_subdirectory(fuzzy-clock)
 add_subdirectory(calculator)
+add_subdirectory(colorpicker)
 add_subdirectory(notes)
 add_subdirectory(timer)
 
diff --git a/applets/colorpicker/CMakeLists.txt b/applets/colorpicker/CMakeLists.txt
new file mode 100644
index 0000000..80b9d61
--- /dev/null
+++ b/applets/colorpicker/CMakeLists.txt
@@ -0,0 +1,14 @@
+set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake ${CMAKE_MODULE_PATH})
+
+plasma_install_package(package org.kde.plasma.colorpicker)
+
+set(colorpickerplugin_SRCS
+    plugin/grabwidget.cpp
+    plugin/colorpickerplugin.cpp
+)
+
+install(FILES plugin/qmldir DESTINATION ${QML_INSTALL_DIR}/org/kde/plasma/private/colorpicker)
+add_library(colorpickerplugin SHARED ${colorpickerplugin_SRCS})
+
+target_link_libraries(colorpickerplugin Qt5::Gui Qt5::Qml Qt5::Widgets)
+install(TARGETS colorpickerplugin DESTINATION ${QML_INSTALL_DIR}/org/kde/plasma/private/colorpicker)
diff --git a/applets/colorpicker/Messages.sh b/applets/colorpicker/Messages.sh
new file mode 100755
index 0000000..79beeab
--- /dev/null
+++ b/applets/colorpicker/Messages.sh
@@ -0,0 +1,3 @@
+#! /usr/bin/env bash
+$XGETTEXT `find . -name \*.qml -o -name \*.js` -o $podir/plasma_applet_org.kde.colorpicker.pot
+rm -f rc.cpp
diff --git a/applets/colorpicker/package/contents/code/logic.js b/applets/colorpicker/package/contents/code/logic.js
new file mode 100644
index 0000000..53f561e
--- /dev/null
+++ b/applets/colorpicker/package/contents/code/logic.js
@@ -0,0 +1,81 @@
+ï»¿/*
+ *  Copyright 2015 Kai Uwe Broulik <kde@privat.broulik.de>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  2.010-1301, USA.
+ */
+
+var formats = [
+    "RRR,GGG,BBB",
+    "#rrggbb",
+    "rrggbb",
+    "#RRGGBB",
+    "RRGGBB",
+    "rgb",
+    "rgba",
+    "Qt.rgba",
+    "LaTeX"
+]
+
+function formatColor(color, format) {
+    var hexR = padHex((color.r * 255).toString(16))
+    var hexG = padHex((color.g * 255).toString(16))
+    var hexB = padHex((color.b * 255).toString(16))
+
+    switch (format) {
+    case "RRR,GGG,BBB":
+        return [color.r * 255, color.g * 255, color.b * 255].join(", ")
+    case "#rrggbb":
+        return "#" + formatColor(color, "rrggbb")
+    case "rrggbb":
+        return formatColor(color, "RRGGBB").toLowerCase()
+    case "#RRGGBB":
+        return "#" + formatColor(color, "RRGGBB")
+    case "RRGGBB":
+        return (hexR + hexG + hexB).toUpperCase()
+    case "rgb":
+        return "rgb(" + formatColor(color, "RRR,GGG,BBB") + ")"
+    case "rgba":
+        return "rgba(" + formatColor(color, "RRR,GGG,BBB") + ", 1)"
+    case "Qt.rgba":
+        return "Qt.rgba(" + [roundComponent(color.r), roundComponent(color.b), roundComponent(color.g)].join(", ") + ", 1)"
+    case "LaTeX":
+        return "\definecolor{ColorName}{rgb}{" + [roundComponent(color.r), roundComponent(color.b), roundComponent(color.g)].join(",") + "}"
+    }
+}
+
+function padHex(n) {
+    return ("0" + n).substr(-2, 2) // fancy
+}
+
+function roundComponent(n) {
+    return Math.round(n * 100) / 100
+}
+
+function menuForColor(color) {
+    return [
+        {text: i18n("Copy to Clipboard"), section: true},
+        {text: formatColor(color, "RRR,GGG,BBB")},
+        {text: formatColor(color, "rgb")},
+        {text: formatColor(color, "rgba")},
+        {separator: true},
+        {text: formatColor(color, "#rrggbb")},
+        {text: formatColor(color, "rrggbb")},
+        {text: formatColor(color, "#RRGGBB")},
+        {text: formatColor(color, "RRGGBB")},
+        {separator: true},
+        {text: formatColor(color, "Qt.rgba")},
+        {text: formatColor(color, "LaTeX")}
+    ]
+}
diff --git a/applets/colorpicker/package/contents/config/config.qml b/applets/colorpicker/package/contents/config/config.qml
new file mode 100644
index 0000000..962a311
--- /dev/null
+++ b/applets/colorpicker/package/contents/config/config.qml
@@ -0,0 +1,29 @@
+/*
+ * Copyright 2015 Kai Uwe Broulik <kde@privat.broulik.de>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License or (at your option) version 3 or any later version
+ * accepted by the membership of KDE e.V. (or its successor approved
+ * by the membership of KDE e.V.), which shall act as a proxy
+ * defined in Section 14 of version 3 of the license.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ */
+
+import org.kde.plasma.configuration 2.0
+
+ConfigModel {
+    ConfigCategory {
+        name: i18n("General")
+        icon: "preferences-desktop-color"
+        source: "configGeneral.qml"
+    }
+}
diff --git a/applets/colorpicker/package/contents/config/main.xml b/applets/colorpicker/package/contents/config/main.xml
new file mode 100644
index 0000000..098034e
--- /dev/null
+++ b/applets/colorpicker/package/contents/config/main.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<kcfg xmlns="http://www.kde.org/standards/kcfg/1.0"
+      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+      xsi:schemaLocation="http://www.kde.org/standards/kcfg/1.0
+      http://www.kde.org/standards/kcfg/1.0/kcfg.xsd" >
+  <kcfgfile name=""/>
+
+  <group name="General">
+    <entry name="history" type="StringList">
+      <default></default>
+    </entry>
+    <entry name="autoClipboard" type="Bool">
+      <default>true</default>
+    </entry>
+    <entry name="defaultFormat" type="String">
+      <default>#RRGGBB</default>
+    </entry>
+    <entry name="pickOnActivate" type="Bool">
+      <default>true</default>
+    </entry>
+  </group>
+
+</kcfg>
diff --git a/applets/colorpicker/package/contents/ui/configGeneral.qml b/applets/colorpicker/package/contents/ui/configGeneral.qml
new file mode 100644
index 0000000..f0e5917
--- /dev/null
+++ b/applets/colorpicker/package/contents/ui/configGeneral.qml
@@ -0,0 +1,99 @@
+/*
+ * Copyright 2015 Kai Uwe Broulik <kde@privat.broulik.de>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License or (at your option) version 3 or any later version
+ * accepted by the membership of KDE e.V. (or its successor approved
+ * by the membership of KDE e.V.), which shall act as a proxy
+ * defined in Section 14 of version 3 of the license.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ */
+
+import QtQuick 2.0
+import QtQuick.Controls 1.0 as QtControls
+import QtQuick.Layouts 1.0
+
+import "../code/logic.js" as Logic
+
+ColumnLayout {
+    id: appearancePage
+
+    property alias cfg_autoClipboard: autoClipboardCheckBox.checked
+    property string cfg_defaultFormat
+    property bool cfg_pickOnActivate
+
+    // by the time Component.onComplete fires, the cfg isn't there yet, hence doing it here
+    onCfg_defaultFormatChanged: defaultFormatCombo.currentIndex = defaultFormatCombo.model.indexOf(cfg_defaultFormat)
+
+    QtControls.CheckBox {
+        id: autoClipboardCheckBox
+        Layout.fillWidth: true
+        text: i18n("Automatically copy color to clipboard")
+    }
+
+    GridLayout {
+        Layout.fillWidth: false // Layout thinks it's smart whereas it's not
+        Layout.alignment: Qt.AlignLeft
+        columns: 2
+
+        QtControls.Label {
+            Layout.row: 0
+            Layout.column: 0
+            Layout.fillWidth: true
+            horizontalAlignment: Text.AlignRight
+            text: i18n("Default color format:")
+        }
+
+        QtControls.ComboBox {
+            id: defaultFormatCombo
+            Layout.row: 0
+            Layout.column: 1
+            // ComboBox default sizing is totally off
+            Layout.minimumWidth: theme.mSize(theme.defaultFont).width * 12
+            model: Logic.formats
+            onCurrentIndexChanged: cfg_defaultFormat = model[currentIndex]
+        }
+
+        QtControls.Label {
+            Layout.row: 1
+            Layout.column: 0
+            Layout.fillWidth: true
+            horizontalAlignment: Text.AlignRight
+            text: i18n("When pressing the keyboard shortcut:")
+        }
+
+        QtControls.ExclusiveGroup {
+            id: activationExclusiveGroup
+        }
+
+        QtControls.RadioButton {
+            Layout.row: 1
+            Layout.column: 1
+            text: i18n("Pick a color")
+            exclusiveGroup: activationExclusiveGroup
+            checked: cfg_pickOnActivate
+            onCheckedChanged: cfg_pickOnActivate = checked
+        }
+
+        QtControls.RadioButton {
+            Layout.row: 2
+            Layout.column: 1
+            text: i18n("Show history")
+            exclusiveGroup: activationExclusiveGroup
+            checked: !cfg_pickOnActivate
+        }
+    }
+
+    Item {
+        Layout.fillHeight: true
+    }
+}
diff --git a/applets/colorpicker/package/contents/ui/main.qml b/applets/colorpicker/package/contents/ui/main.qml
new file mode 100644
index 0000000..f776e65
--- /dev/null
+++ b/applets/colorpicker/package/contents/ui/main.qml
@@ -0,0 +1,212 @@
+ï»¿/*
+ *  Copyright 2015 Kai Uwe Broulik <kde@privat.broulik.de>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  2.010-1301, USA.
+ */
+
+import QtQuick 2.2
+import QtQuick.Controls 1.1 as QtControls
+import QtQuick.Layouts 1.1
+
+import org.kde.plasma.plasmoid 2.0
+import org.kde.plasma.core 2.0 as PlasmaCore
+import org.kde.plasma.components 2.0 as PlasmaComponents
+import org.kde.plasma.extras 2.0 as PlasmaExtras
+
+import org.kde.plasma.private.colorpicker 2.0 as ColorPicker
+import "../code/logic.js" as Logic
+
+Item {
+    id: root
+
+    readonly property bool isVertical: plasmoid.formFactor === PlasmaCore.Types.Vertical
+
+    readonly property color recentColor: plasmoid.configuration.history[0] || theme.highlightColor // nice default color
+    readonly property string defaultFormat: plasmoid.configuration.defaultFormat
+
+    Plasmoid.preferredRepresentation: Plasmoid.compactRepresentation
+
+    ColorPicker.GrabWidget {
+        id: picker
+        onCurrentColorChanged: {
+            if (currentColor != recentColor) {
+                // this is needed, otherwise the first pick after plasma start isn't registered
+                var history = plasmoid.configuration.history
+
+                // this .toString() is needed otherwise Qt completely screws it up
+                // replacing *all* items in the list by the new items and other nonsense
+                history.unshift(currentColor.toString())
+
+                // limit to 9 entries
+                plasmoid.configuration.history = history.slice(0, 9)
+            }
+
+            if (plasmoid.configuration.autoClipboard) {
+                picker.copyToClipboard(Logic.formatColor(currentColor, root.defaultFormat))
+            }
+        }
+    }
+
+    // prevents the popup from actually opening, needs to be queued
+    Timer {
+        id: delayedPickTimer
+        interval: 0
+        onTriggered: {
+            plasmoid.expanded = false
+            picker.pick()
+        }
+    }
+
+    Plasmoid.onActivated: {
+        if (plasmoid.configuration.pickOnActivate) {
+            delayedPickTimer.start()
+        }
+    }
+
+    Plasmoid.compactRepresentation: Grid {
+        readonly property int buttonSize: root.isVertical ? width : height
+
+        columns: root.isVertical ? 1 : 2
+        rows: root.isVertical ? 2 : 1
+
+        Layout.minimumWidth: isVertical ? units.iconSizes.small : (height * columns)
+        Layout.minimumHeight: isVertical ? (width * rows) : units.iconSizes.small
+
+        PlasmaComponents.ToolButton {
+            width: buttonSize
+            height: buttonSize
+            iconName: "color-picker"
+            tooltip: i18n("Pick Color")
+            onClicked: picker.pick()
+        }
+
+        PlasmaComponents.ToolButton {
+            width: buttonSize
+            height: buttonSize
+            tooltip: i18n("Color Options")
+            enabled: plasmoid.configuration.history.length > 0
+            onClicked: plasmoid.expanded = !plasmoid.expanded
+
+            Rectangle {
+                anchors.centerIn: parent
+                width: units.roundToIconSize(parent.width * 0.7)
+                height: width
+                radius: width / 2
+                color: root.recentColor
+            }
+        }
+    }
+
+    Plasmoid.fullRepresentation: GridView {
+        id: fullRoot
+
+        readonly property int columns: 3
+
+        Layout.minimumWidth: columns * units.gridUnit * 6
+        Layout.minimumHeight: Layout.minimumWidth
+        Layout.maximumWidth: Layout.minimumWidth
+        Layout.maximumHeight: Layout.minimumHeight
+
+        cellWidth: Math.floor(fullRoot.width / fullRoot.columns)
+        cellHeight: cellWidth
+        boundsBehavior: Flickable.StopAtBounds
+
+        model: plasmoid.configuration.history
+
+        highlight: PlasmaComponents.Highlight {}
+        highlightMoveDuration: 0
+
+        Connections {
+            target: plasmoid
+            onExpandedChanged: {
+                if (plasmoid.expanded) {
+                    fullRoot.forceActiveFocus()
+                }
+            }
+        }
+
+        QtControls.Action {
+            shortcut: "Return"
+            onTriggered: {
+                if (fullRoot.currentItem) {
+                    fullRoot.currentItem.clicked(null)
+                }
+            }
+        }
+
+        QtControls.Action {
+            shortcut: "Escape"
+            onTriggered: plasmoid.expanded = false
+        }
+
+        delegate: MouseArea {
+            id: delegateMouse
+
+            readonly property color currentColor: modelData
+
+            width: fullRoot.cellWidth
+            height: fullRoot.cellHeight
+
+            hoverEnabled: true
+            onContainsMouseChanged: {
+                if (containsMouse) {
+                    fullRoot.currentIndex = index
+                } else {
+                    fullRoot.currentIndex = -1
+                }
+            }
+
+            onClicked: {
+                formattingMenu.model = Logic.menuForColor(delegateMouse.currentColor)
+                formattingMenu.open(0, rect.height)
+            }
+
+            Rectangle {
+                id: rect
+
+                anchors {
+                    fill: parent
+                    margins: units.smallSpacing
+                }
+
+                color: delegateMouse.currentColor
+
+                Rectangle {
+                    anchors.bottom: parent.bottom
+                    width: parent.width
+                    height: colorLabel.contentHeight + 2 * units.smallSpacing
+                    color: theme.backgroundColor
+                    opacity: 0.8
+
+                    PlasmaComponents.Label {
+                        id: colorLabel
+                        anchors.fill: parent
+                        horizontalAlignment: Text.AlignHCenter
+                        verticalAlignment: Text.AlignVCenter
+                        elide: Text.ElideLeft
+                        fontSizeMode: Text.HorizontalFit
+                        minimumPointSize: theme.smallestFont.pointSize
+                        text: Logic.formatColor(delegateMouse.currentColor, root.defaultFormat)
+                    }
+                }
+
+                PlasmaComponents.ModelContextMenu {
+                    id: formattingMenu
+                    onClicked: picker.copyToClipboard(model.text)
+                }
+            }
+        }
+    }
+}
diff --git a/applets/colorpicker/package/metadata.desktop b/applets/colorpicker/package/metadata.desktop
new file mode 100644
index 0000000..ddbe6d1
--- /dev/null
+++ b/applets/colorpicker/package/metadata.desktop
@@ -0,0 +1,128 @@
+[Desktop Entry]
+Name=Color Picker
+Name[ar]=ÙÙØªÙ Ø§ÙØ£ÙÙØ§Ù
+Name[bs]=BiraÄ boja
+Name[ca]=Selector de color
+Name[ca@valencia]=Selector de color
+Name[cs]=KapÃ¡tko
+Name[csb]=WrbiÃ©rk farwÃ«
+Name[da]=FarvevÃ¦lger
+Name[de]=Farbauswahl
+Name[el]=ÎÏÎ¹Î»Î¿Î³Î­Î±Ï ÏÏÏÎ¼Î¬ÏÏÎ½
+Name[en_GB]=Colour Picker
+Name[es]=Selector de color
+Name[et]=VÃ¤rvivalija
+Name[eu]=Kolore hautatzailea
+Name[fi]=VÃ¤rivalitsin
+Name[fr]=SÃ©lecteur de couleurs
+Name[ga]=RoghnÃ³ir Dathanna
+Name[gl]=Selector de cores
+Name[he]=×××××¨ ××¦××¢××
+Name[hr]=ObiraÄ boja
+Name[hu]=SzÃ­nvÃ¡lasztÃ³
+Name[is]=LitatÃ­na
+Name[it]=Acchiappa colore
+Name[ja]=ã«ã©ã¼ããã«ã¼
+Name[kk]=Ð¢Ò¯Ñ ÑÐµÑÐ³ÑÑÑ
+Name[km]=á§áááááâáááá¾áâááá
+Name[ko]=ìì ì íê¸°
+Name[ku]=BijarkerÃª RengÃª
+Name[lt]=SpalvÅ³ parinkiklis
+Name[lv]=KrÄsu izvÄlÄtÄjs
+Name[mr]=à¤°à¤à¤ à¤¨à¤¿à¤°à¥à¤µà¤¾à¤à¤
+Name[ms]=Pemungut Warna
+Name[nb]=Fargevelger
+Name[nds]=KlÃ¶Ã¶rkÃ¶Ã¶r
+Name[nl]=Kleurenkiezer
+Name[nn]=Fargeveljar
+Name[pa]=à¨°à©°à¨ à¨à©à¨£à¨à¨¾à¨°
+Name[pl]=WybÃ³r koloru
+Name[pt]=ExtracÃ§Ã£o de Cores
+Name[pt_BR]=Seletor de cores
+Name[ro]=Selector de culori
+Name[ru]=ÐÑÐ±Ð¾Ñ ÑÐ²ÐµÑÐ°
+Name[sk]=VÃ½ber farby
+Name[sl]=Izbirnik barv
+Name[sq]=ZgjedhÃ«s i ngjyrÃ«s
+Name[sr]=Ð±Ð¸ÑÐ°Ñ Ð±Ð¾ÑÐ°
+Name[sr@ijekavian]=Ð±Ð¸ÑÐ°Ñ Ð±Ð¾ÑÐ°
+Name[sr@ijekavianlatin]=biraÄ boja
+Name[sr@latin]=biraÄ boja
+Name[sv]=FÃ¤rghÃ¤mtare
+Name[th]=à¹à¸à¸£à¸·à¹à¸­à¸à¸¡à¸·à¸­à¹à¸¥à¸·à¸­à¸à¸ªà¸µ
+Name[tr]=Renk SeÃ§ici
+Name[ug]=Ø±ÛÚ­ Ø¦Ø§ÙØºÛÚ
+Name[uk]=ÐÑÐ¿ÐµÑÐºÐ°
+Name[wa]=Apiceu d' coleur
+Name[x-test]=xxColor Pickerxx
+Name[zh_CN]=é¢è²æ¾åå¨
+Name[zh_TW]=é¡è²æé¸å¨
+Comment=Pick a color from the desktop
+Comment[ar]=Ø§Ø®ØªØ± ÙÙÙØ§ ÙÙ Ø³Ø·Ø­ Ø§ÙÙÙØªØ¨
+Comment[bs]=Izaberite boju sa povrÅ¡i
+Comment[ca]=Selecciona un color de l'escriptori
+Comment[ca@valencia]=Selecciona un color de l'escriptori
+Comment[cs]=VzÃ­t barvu z plochy
+Comment[csb]=WÃ«biÃ©rzÃ« farwÃ£ z pÃ¹ltu
+Comment[da]=Pluk en farve fra skrivebordet.
+Comment[de]=Farbwerte von einer Stelle auf der ArbeitsflÃ¤che auswÃ¤hlen
+Comment[el]=ÎÏÎ¹Î»Î¿Î³Î® ÎµÎ½ÏÏ ÏÏÏÎ¼Î±ÏÎ¿Ï Î±ÏÏ ÏÎ·Î½ ÎµÏÎ¹ÏÎ¬Î½ÎµÎ¹Î± ÎµÏÎ³Î±ÏÎ¯Î±Ï
+Comment[en_GB]=Pick a colour from the desktop
+Comment[es]=Seleccionar un color del escritorio
+Comment[et]=VÃ¤rvi valimine otse tÃ¶Ã¶laualt
+Comment[eu]=Hartu kolore bat mahaigainetik
+Comment[fi]=Poimi vÃ¤ri tyÃ¶pÃ¶ydÃ¤ltÃ¤
+Comment[fr]=Permet de sÃ©lectionner une couleur depuis votre bureau
+Comment[ga]=Roghnaigh dath Ã³n deasc
+Comment[gl]=Escolle unha cor do escritorio
+Comment[he]=×××¨ ×¦××¢ ××©×××× ××¢××××
+Comment[hr]=Birajte boju s radne povrÅ¡ine
+Comment[hu]=SzÃ­nvÃ¡lasztÃ¡s az asztalrÃ³l
+Comment[is]=Plokkar lit af skjÃ¡borÃ°i
+Comment[it]=Ottieni un colore dal desktop
+Comment[ja]=ãã¹ã¯ãããããè²ãæ¡åãã¾ã
+Comment[kk]=Ð¢Ò¯ÑÑÑ Ò¯ÑÑÐµÐ»Ð´ÐµÐ½ ÑÒ±ÒÑÐ¿ ÑÐµÑÑ ÒÒ±ÑÐ°Ð»Ñ
+Comment[km]=ááâáááâáá¸âáááááá»
+Comment[ko]=ë°ì¤í¬í±ì ìì ê°ì ¸ì¤ê¸°
+Comment[ku]=JÃª sermasÃª rengekÃ® hilbijÃªre
+Comment[lt]=Pasirinkti spalvÄ iÅ¡ darbastalio
+Comment[lv]=Ä»auj izvÄlÄties krÄsu no darbvirsmas
+Comment[mr]=à¤¡à¥à¤¸à¥à¤à¤à¥à¤ª à¤µà¤°à¥à¤² à¤°à¤à¤ à¤¨à¤¿à¤µà¤¡à¤¾
+Comment[nb]=Plukk en farge fra skrivebordet
+Comment[nds]=En KlÃ¶Ã¶r vun den Schriefdisch insammeln
+Comment[nl]=Kies een kleur van het bureaublad
+Comment[nn]=Hent fargar frÃ¥ skrivebordet
+Comment[pa]=à¨¡à©à¨¸à¨à¨à¨¾à¨ª à¨¤à©à¨ à¨°à©°à¨ à¨à©à¨£à©
+Comment[pl]=Wybiera kolory z pulpitu
+Comment[pt]=Escolha uma cor no ambiente de trabalho
+Comment[pt_BR]=Escolha uma cor na Ã¡rea de trabalho
+Comment[ro]=AlegeÈi o culoare de pe birou
+Comment[ru]=ÐÑÐ±Ð¾Ñ ÑÐ²ÐµÑÐ° Ð¸Ð· ÑÐ¾ÑÐºÐ¸ ÑÐ°Ð±Ð¾ÑÐµÐ³Ð¾ ÑÑÐ¾Ð»Ð°
+Comment[sk]=VÃ½ber farby z plochy
+Comment[sl]=Izberite barvo z namizja
+Comment[sr]=ÐÐ·Ð°Ð±ÐµÑÐ¸ÑÐµ Ð±Ð¾ÑÑ ÑÐ° Ð¿Ð¾Ð²ÑÑÐ¸
+Comment[sr@ijekavian]=ÐÐ·Ð°Ð±ÐµÑÐ¸ÑÐµ Ð±Ð¾ÑÑ ÑÐ° Ð¿Ð¾Ð²ÑÑÐ¸
+Comment[sr@ijekavianlatin]=Izaberite boju sa povrÅ¡i
+Comment[sr@latin]=Izaberite boju sa povrÅ¡i
+Comment[sv]=HÃ¤mta en fÃ¤rg frÃ¥n skrivbordet
+Comment[th]=à¹à¸¥à¸·à¸­à¸à¸ªà¸µà¹à¸à¹à¸à¹à¸²à¸¢ à¹ à¸à¹à¸²à¸à¸à¸²à¸à¸à¸·à¹à¸à¸à¸µà¹à¸à¸³à¸à¸²à¸
+Comment[tr]=Ekranda gÃ¶rdÃ¼ÄÃ¼nÃ¼z herhangi bir rengi seÃ§mek iÃ§in
+Comment[uk]=ÐÐ¸Ð±ÑÑ ÐºÐ¾Ð»ÑÐ¾ÑÑ Ð·Ñ ÑÑÑÐ»ÑÐ½Ð¸ÑÑ
+Comment[wa]=Apice ene coleur do scribanne
+Comment[x-test]=xxPick a color from the desktopxx
+Comment[zh_CN]=ä»æ¡é¢æ¾åé¢è²
+Comment[zh_TW]=å¾æ¡é¢ä¸æé¸é¡è²
+Icon=color-picker
+Type=Service
+X-KDE-ServiceTypes=Plasma/Applet
+
+X-Plasma-API=declarativeappletscript
+X-Plasma-MainScript=ui/main.qml
+
+X-KDE-PluginInfo-Author=Kai Uwe Broulik
+X-KDE-PluginInfo-Email=kde@privat.broulik.de
+X-KDE-PluginInfo-Name=org.kde.plasma.colorpicker
+X-KDE-PluginInfo-Version=2.0
+X-KDE-PluginInfo-Website=http://userbase.kde.org/Plasma/ColorPicker
+X-KDE-PluginInfo-Category=Graphics
+X-KDE-PluginInfo-License=GPL
diff --git a/applets/colorpicker/plugin/colorpickerplugin.h b/applets/colorpicker/plugin/colorpickerplugin.h
new file mode 100644
index 0000000..350b427
--- /dev/null
+++ b/applets/colorpicker/plugin/colorpickerplugin.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2015 Kai Uwe Broulik <kde@privat.broulik.de>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License or (at your option) version 3 or any later version
+ * accepted by the membership of KDE e.V. (or its successor approved
+ * by the membership of KDE e.V.), which shall act as a proxy
+ * defined in Section 14 of version 3 of the license.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ */
+
+#ifndef COLORPICKERPLUGIN_H
+#define COLORPICKERPLUGIN_H
+
+#include <QQmlEngine>
+#include <QQmlExtensionPlugin>
+
+class ColorPickerPlugin : public QQmlExtensionPlugin
+{
+    Q_OBJECT
+    Q_PLUGIN_METADATA(IID "org.qt-project.Qt.QQmlExtensionInterface")
+
+public:
+    virtual void registerTypes(const char *uri);
+
+};
+
+#endif // COLORPICKERPLUGIN_H
diff --git a/applets/colorpicker/plugin/colorpickerplugin.cpp b/applets/colorpicker/plugin/colorpickerplugin.cpp
new file mode 100644
index 0000000..1976271
--- /dev/null
+++ b/applets/colorpicker/plugin/colorpickerplugin.cpp
@@ -0,0 +1,31 @@
+/*
+ * Copyright 2015 Kai Uwe Broulik <kde@privat.broulik.de>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License or (at your option) version 3 or any later version
+ * accepted by the membership of KDE e.V. (or its successor approved
+ * by the membership of KDE e.V.), which shall act as a proxy
+ * defined in Section 14 of version 3 of the license.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ */
+
+#include "colorpickerplugin.h"
+
+#include <QtQml>
+
+#include "grabwidget.h"
+
+void ColorPickerPlugin::registerTypes(const char* uri)
+{
+    Q_ASSERT(uri == QLatin1String("org.kde.plasma.private.colorpicker"));
+    qmlRegisterType<GrabWidget>(uri, 2, 0, "GrabWidget");
+}
diff --git a/applets/colorpicker/plugin/grabwidget.h b/applets/colorpicker/plugin/grabwidget.h
new file mode 100644
index 0000000..d8e46e6
--- /dev/null
+++ b/applets/colorpicker/plugin/grabwidget.h
@@ -0,0 +1,57 @@
+/*
+ * Copyright 2015 Kai Uwe Broulik <kde@privat.broulik.de>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License or (at your option) version 3 or any later version
+ * accepted by the membership of KDE e.V. (or its successor approved
+ * by the membership of KDE e.V.), which shall act as a proxy
+ * defined in Section 14 of version 3 of the license.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ */
+
+#ifndef GRABWIDGET_H
+#define GRABWIDGET_H
+
+#include <QObject>
+#include <QColor>
+
+class QWidget;
+
+class GrabWidget : public QObject
+{
+    Q_OBJECT
+
+    Q_PROPERTY(QColor currentColor READ currentColor NOTIFY currentColorChanged)
+
+public:
+    explicit GrabWidget(QObject *parent = nullptr);
+    virtual ~GrabWidget();
+
+    QColor currentColor() const;
+
+    Q_INVOKABLE void pick();
+    Q_INVOKABLE void copyToClipboard(const QString &text);
+
+signals:
+    void currentColorChanged();
+
+protected:
+    virtual bool eventFilter(QObject *watched, QEvent *event) override;
+
+private:
+    QWidget *m_grabWidget;
+
+    QColor m_currentColor;
+
+};
+
+#endif // GRABWIDGET_H
diff --git a/applets/colorpicker/plugin/grabwidget.cpp b/applets/colorpicker/plugin/grabwidget.cpp
new file mode 100644
index 0000000..dca59c8
--- /dev/null
+++ b/applets/colorpicker/plugin/grabwidget.cpp
@@ -0,0 +1,84 @@
+/*
+ * Copyright 2015 Kai Uwe Broulik <kde@privat.broulik.de>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License or (at your option) version 3 or any later version
+ * accepted by the membership of KDE e.V. (or its successor approved
+ * by the membership of KDE e.V.), which shall act as a proxy
+ * defined in Section 14 of version 3 of the license.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ */
+
+#include "grabwidget.h"
+
+#include <QDebug>
+#include <QApplication>
+#include <QClipboard>
+#include <QEvent>
+#include <QMouseEvent>
+#include <QScreen>
+#include <QWidget>
+
+GrabWidget::GrabWidget(QObject *parent)
+    : QObject(parent)
+    , m_grabWidget(new QWidget(nullptr, Qt::BypassWindowManagerHint))
+{
+    m_grabWidget->move(-5000, -5000);
+}
+
+GrabWidget::~GrabWidget()
+{
+    delete m_grabWidget;
+}
+
+QColor GrabWidget::currentColor() const
+{
+    return m_currentColor;
+}
+
+void GrabWidget::pick()
+{
+    // TODO pretend the mouse went somewhere else to prevent the tooltip from spawning
+
+    m_grabWidget->show();
+    m_grabWidget->installEventFilter(this);
+    m_grabWidget->grabMouse(Qt::CrossCursor);
+}
+
+void GrabWidget::copyToClipboard(const QString &text)
+{
+    QApplication::clipboard()->setText(text);
+}
+
+bool GrabWidget::eventFilter(QObject *watched, QEvent *event)
+{
+    if (watched == m_grabWidget && event->type() == QEvent::MouseButtonRelease) {
+        m_grabWidget->removeEventFilter(this);
+        m_grabWidget->hide();
+        m_grabWidget->releaseMouse();
+
+        QMouseEvent *me = static_cast<QMouseEvent *>(event);
+        const QPoint pos = me->globalPos();
+
+        foreach (QScreen *screen, QApplication::screens()) {
+            if (screen->geometry().contains(pos)) {
+                const QPixmap pixmap = screen->grabWindow(0);
+                const QPoint localPos = (pos - screen->geometry().topLeft()) * qApp->devicePixelRatio();
+                m_currentColor = QColor(pixmap.toImage().pixel(localPos));
+                emit currentColorChanged();
+                break;
+            }
+        }
+    }
+
+    return QObject::eventFilter(watched, event);
+}
diff --git a/applets/colorpicker/plugin/qmldir b/applets/colorpicker/plugin/qmldir
new file mode 100644
index 0000000..791d812
--- /dev/null
+++ b/applets/colorpicker/plugin/qmldir
@@ -0,0 +1,2 @@
+module org.kde.plasma.private.colorpicker
+plugin colorpickerplugin
diff --git a/applets/kolourpicker/CMakeLists.txt b/applets/kolourpicker/CMakeLists.txt
deleted file mode 100644
index 522e0de..0000000
--- a/applets/kolourpicker/CMakeLists.txt
+++ /dev/null
@@ -1,23 +0,0 @@
-set(KOLOURPICKER_X11_LIB FALSE)
-if(X11_FOUND AND X11_Xutil_FOUND)
-   set(KOLOURPICKER_X11_LIB TRUE)
-   include_directories(${X11_Xutil_INCLUDE_PATH})
-endif(X11_FOUND AND X11_Xutil_FOUND)
-
-configure_file(
-   ${CMAKE_CURRENT_SOURCE_DIR}/config-kolourpicker.h.cmake
-   ${CMAKE_CURRENT_BINARY_DIR}/config-kolourpicker.h
-)
-
-set(kolourpicker_SRCS
-    kolourpicker.cpp
-)
-
-kde4_add_plugin(plasma_applet_kolourpicker ${kolourpicker_SRCS})
-target_link_libraries(plasma_applet_kolourpicker ${KDE4_PLASMA_LIBS} ${KDE4_KIO_LIBS})
-if(KOLOURPICKER_X11_LIB)
-   target_link_libraries(plasma_applet_kolourpicker ${X11_X11_LIB})
-endif(KOLOURPICKER_X11_LIB)
-
-install(TARGETS plasma_applet_kolourpicker DESTINATION ${PLUGIN_INSTALL_DIR})
-install(FILES plasma-kolourpicker-default.desktop DESTINATION ${SERVICES_INSTALL_DIR})
diff --git a/applets/kolourpicker/Messages.sh b/applets/kolourpicker/Messages.sh
deleted file mode 100755
index 072def0..0000000
--- a/applets/kolourpicker/Messages.sh
+++ /dev/null
@@ -1,2 +0,0 @@
-#! /usr/bin/env bash
-$XGETTEXT *.cpp -o $podir/plasma_applet_kolourpicker.pot
diff --git a/applets/kolourpicker/config-kolourpicker.h.cmake b/applets/kolourpicker/config-kolourpicker.h.cmake
deleted file mode 100644
index 6cb43cc..0000000
--- a/applets/kolourpicker/config-kolourpicker.h.cmake
+++ /dev/null
@@ -1,6 +0,0 @@
-#ifndef CONFIG_KOLOURPICKER_H
-#define CONFIG_KOLOURPICKER_H
-
-#cmakedefine KOLOURPICKER_X11_LIB 1
-
-#endif
diff --git a/applets/kolourpicker/kolourpicker.h b/applets/kolourpicker/kolourpicker.h
deleted file mode 100644
index bde3ff7..0000000
--- a/applets/kolourpicker/kolourpicker.h
+++ /dev/null
@@ -1,74 +0,0 @@
-/***************************************************************************
- *   Copyright (C) 2007 by Pino Toscano <pino@kde.org>                     *
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- ***************************************************************************/
-
-#ifndef KOLOURPICKER_H
-#define KOLOURPICKER_H
-
-#include <plasma/applet.h>
-
-#include <qcolor.h>
-#include <qhash.h>
-#include <QString>
-#include <QColor>
-
-class QMenu;
-class QWidget;
-
-namespace Plasma
-{
-    class ToolButton;
-} // namespace Plasma
-
-class Kolourpicker : public Plasma::Applet
-{
-    Q_OBJECT
-    public:
-        Kolourpicker(QObject *parent, const QVariantList &args);
-        ~Kolourpicker();
-
-    public Q_SLOTS:
-        virtual void init();
-        void configChanged();
-
-    protected:
-        virtual bool eventFilter(QObject *watched, QEvent *event);
-        virtual QVariant itemChange(GraphicsItemChange change, const QVariant &value);
-        void constraintsEvent(Plasma::Constraints constraints);
-
-    private slots:
-        void grabClicked();
-        void historyClicked();
-        void colorActionTriggered(QAction *act);
-        void colorActionTriggered(const QColor& color);
-        void clearHistory(bool save = true);
-        void installFilter();
-        void setDefaultColorFormat(QAction* act);
-
-    private:
-        void addColor(const QColor &color, bool save = true);
-        void saveData(KConfigGroup &cg);
-        QString toLatex(const QColor& color);
-        Plasma::ToolButton *m_grabButton;
-        Plasma::ToolButton *m_configAndHistory;
-        QMenu *m_configAndHistoryMenu;
-        QHash<QColor, QAction *> m_menus;
-        QStringList m_colors;
-        QStringList m_colors_format;
-        QWidget *m_grabWidget;
-        QString m_color_format;
-};
-
-inline uint qHash(const QColor &color)
-{
-    return qHash(color.name());
-}
-
-K_EXPORT_PLASMA_APPLET(kolourpicker, Kolourpicker)
-
-#endif
diff --git a/applets/kolourpicker/kolourpicker.cpp b/applets/kolourpicker/kolourpicker.cpp
deleted file mode 100644
index a4b0ea4..0000000
--- a/applets/kolourpicker/kolourpicker.cpp
+++ /dev/null
@@ -1,413 +0,0 @@
-/***************************************************************************
- *   Copyright (C) 2007 by Pino Toscano <pino@kde.org>                     *
- *                                                                         *
- *   This program is free software; you can redistribute it and/or modify  *
- *   it under the terms of the GNU General Public License as published by  *
- *   the Free Software Foundation; either version 2 of the License, or     *
- *   (at your option) any later version.                                   *
- ***************************************************************************/
-
-#include "kolourpicker.h"
-
-#include <qapplication.h>
-#include <qclipboard.h>
-#include <qcursor.h>
-#include <qdesktopwidget.h>
-#include <qevent.h>
-#include <qgraphicssceneevent.h>
-#include <qgraphicslinearlayout.h>
-#include <qicon.h>
-#include <qiconengine.h>
-#include <qimage.h>
-#include <qmimedata.h>
-#include <qpainter.h>
-#include <qpixmap.h>
-#include <qtoolbutton.h>
-
-#include <kdebug.h>
-#include <kicon.h>
-#include <klocale.h>
-#include <kmenu.h>
-
-#include <plasma/widgets/toolbutton.h>
-
-#include <config-kolourpicker.h>
-
-#if defined(KOLOURPICKER_X11_LIB)
-#include <X11/Xlib.h>
-#include <X11/Xutil.h>
-#include <QX11Info>
-#endif
-
-static KMenu* buildMenuForColor(const QColor &color)
-{
-    KMenu *menu = new KMenu();
-    const QVariant colorData = qVariantFromValue(color);
-    QAction *act = menu->addAction(KIcon("draw-text"), QString("%1, %2, %3").arg(color.red()).arg(color.green()).arg(color.blue()));
-    act->setData(colorData);
-    QString htmlName = color.name();
-    QString htmlNameUp = htmlName.toUpper();
-    KIcon mimeIcon("text-html");
-    act = menu->addAction(mimeIcon, htmlName);
-    act->setData(colorData);
-    act = menu->addAction(mimeIcon, htmlName.mid(1));
-    act->setData(colorData);
-
-    if (htmlNameUp != htmlName) {
-        act = menu->addAction(mimeIcon, htmlNameUp);
-        act->setData(colorData);
-        act = menu->addAction(mimeIcon, htmlNameUp.mid(1));
-        act->setData(colorData);
-    }
-
-    menu->addSeparator();
-    act = menu->addAction(mimeIcon, "Latex Color");
-    act->setData(colorData);
-
-    act = menu->addAction(mimeIcon, htmlName + QString::fromLatin1("ff"));
-    act->setData(colorData);
-    return menu;
-}
-
-static QColor pickColor(const QPoint &point)
-{
-#if defined(KOLOURPICKER_X11_LIB)
-/*
-  It seems the Qt4 stuff returns a null grabbed pixmap when the Display
-  has ARGB visuals.
-  Then, access directly to the screen pixels using the X API.
-*/
-    Window root = RootWindow(QX11Info::display(), QX11Info::appScreen());
-    XImage *ximg = XGetImage(QX11Info::display(), root, point.x(), point.y(), 1, 1, -1, ZPixmap);
-    unsigned long xpixel = XGetPixel(ximg, 0, 0);
-    XDestroyImage(ximg);
-    XColor xcol;
-    xcol.pixel = xpixel;
-    xcol.flags = DoRed | DoGreen | DoBlue;
-    XQueryColor(QX11Info::display(), DefaultColormap(QX11Info::display(), QX11Info::appScreen()), &xcol);
-    return QColor::fromRgbF(xcol.red / 65535.0, xcol.green / 65535.0, xcol.blue / 65535.0);
-#else
-    QDesktopWidget *desktop = QApplication::desktop();
-    QPixmap pix = QPixmap::grabWindow(desktop->winId(), point.x(), point.y(), 1, 1);
-    QImage img = pix.toImage();
-    return QColor(img.pixel(0, 0));
-#endif
-}
-
-class ColorIconEngine : public QIconEngine
-{
-    public:
-        ColorIconEngine(const QColor &color);
-        virtual ~ColorIconEngine();
-
-        virtual void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state);
-        virtual QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
-
-    public:
-        QColor m_color;
-};
-
-ColorIconEngine::ColorIconEngine(const QColor &color)
-    : m_color(color)
-{
-}
-
-ColorIconEngine::~ColorIconEngine()
-{
-}
-
-void ColorIconEngine::paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state)
-{
-    Q_UNUSED(mode)
-    Q_UNUSED(state)
-    painter->setPen(Qt::NoPen);
-    painter->setBrush(m_color);
-    painter->drawEllipse(rect);
-}
-
-QPixmap ColorIconEngine::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state)
-{
-    QPixmap pix(size);
-    pix.fill(QColor(0,0,0,0));
-    QPainter p(&pix);
-    p.setRenderHint(QPainter::Antialiasing, true);
-    paint(&p, pix.rect(), mode, state);
-    p.end();
-    return pix;
-}
-
-class ColorIcon : public QIcon
-{
-    public:
-        ColorIcon(const QColor &color);
-};
-
-ColorIcon::ColorIcon(const QColor &color)
-    : QIcon(new ColorIconEngine(color))
-{
-}
-
-Kolourpicker::Kolourpicker(QObject *parent, const QVariantList &args)
-    : Plasma::Applet(parent, args),
-      m_grabWidget(0)
-{
-    resize(40, 80);
-    setAspectRatioMode(Plasma::IgnoreAspectRatio);
-
-    QGraphicsLinearLayout *mainlay = new QGraphicsLinearLayout(Qt::Vertical);
-    setLayout(mainlay);
-    mainlay->setSpacing(4);
-    mainlay->setContentsMargins(0.0, 0.0, 0.0, 0.0);
-
-    m_grabWidget = new QWidget( 0,  Qt::X11BypassWindowManagerHint );
-    m_grabWidget->move( -1000, -1000 );
-
-    m_grabButton = new Plasma::ToolButton(this);
-    m_grabButton->setMinimumSize(20, 20);
-    mainlay->addItem(m_grabButton);
-    m_grabButton->nativeWidget()->setIcon(KIcon("color-picker"));
-    m_grabButton->nativeWidget()->setSizePolicy(QSizePolicy::Preferred, QSizePolicy::Preferred);
-    connect(m_grabButton, SIGNAL(clicked()), this, SLOT(grabClicked()));
-
-    m_configAndHistory = new Plasma::ToolButton(this);
-    m_configAndHistory->setMinimumSize(20, 20);
-    mainlay->addItem(m_configAndHistory);
-
-    m_configAndHistory->nativeWidget()->setIcon(ColorIcon(Qt::gray));
-    m_configAndHistory->nativeWidget()->setSizePolicy(QSizePolicy::Preferred, QSizePolicy::Preferred);
-    connect(m_configAndHistory, SIGNAL(clicked()), this, SLOT(historyClicked()));
-
-    KMenu *menu = new KMenu();
-    menu->addTitle(i18n("Color Options"));
-    m_configAndHistoryMenu = menu;
-    QAction *act = m_configAndHistoryMenu->addAction(KIcon("edit-clear-history"), i18n("Clear History"));
-    connect(act, SIGNAL(triggered(bool)), this, SLOT(clearHistory()));
-    m_configAndHistoryMenu->addSeparator();
-
-    // building the menu for default color string format.
-    KMenu *m_colors_menu = new KMenu();
-    m_colors_menu->addTitle(i18n("Default Format"));
-    m_colors_format << "r, g, b" << "#RRGGBB" << "RRGGBB" << "#rrggbb" << "rrggbb";
-    foreach (const QString& s, m_colors_format) {
-      act = m_colors_menu->addAction(KIcon("draw-text"), s);
-      act->setData(s);
-    }
-
-    m_colors_menu->addSeparator();
-    act = m_colors_menu->addAction(KIcon("draw-text"), "Latex");
-    act->setData("Latex");
-
-    connect(m_colors_menu, SIGNAL(triggered(QAction*)), this, SLOT(setDefaultColorFormat(QAction*)));
-    act = m_colors_menu->menuAction();
-    act->setText(i18n("Default Color Format"));
-    m_configAndHistoryMenu->addMenu(m_colors_menu);
-}
-
-void Kolourpicker::setDefaultColorFormat(QAction *act)
-{
-    if (!act) {
-      return;
-    }
-
-    m_color_format = qvariant_cast<QString>(act->data());
-}
-
-Kolourpicker::~Kolourpicker()
-{
-    clearHistory(false);
-    delete m_grabWidget;
-    delete m_configAndHistoryMenu;
-}
-
-void Kolourpicker::init()
-{
-    configChanged();
-}
-
-void Kolourpicker::configChanged()
-{
-    // remove old entries, we are only interested in ones from the config now
-    clearHistory(false);
-
-    KConfigGroup cg = config();
-
-    QList<QString> colorList = cg.readEntry("Colors", QList<QString>());
-    m_color_format = cg.readEntry("ColorFormat", QString());
-
-    Q_FOREACH (const QString &color, colorList) {
-        addColor(QColor(color), false);
-    }
-}
-
-void Kolourpicker::constraintsEvent(Plasma::Constraints constraints)
-{
-    if (constraints & Plasma::FormFactorConstraint) {
-        if (formFactor() == Plasma::Planar) {
-            setBackgroundHints(Plasma::Applet::StandardBackground);
-        } else {
-            setBackgroundHints(Plasma::Applet::NoBackground);
-        }
-    }
-
-    if (constraints & Plasma::FormFactorConstraint ||
-        constraints & Plasma::SizeConstraint) {
-        QGraphicsLinearLayout *l = dynamic_cast<QGraphicsLinearLayout *>(layout());
-        if (formFactor() == Plasma::Horizontal && size().height() < 40) {
-            l->setOrientation(Qt::Horizontal);
-        } else {
-            l->setOrientation(Qt::Vertical);
-        }
-    }
-}
-
-bool Kolourpicker::eventFilter(QObject *watched, QEvent *event)
-{
-    if (watched == m_grabWidget && event->type() == QEvent::MouseButtonRelease) {
-        m_grabWidget->removeEventFilter(this);
-	m_grabWidget->hide();
-        m_grabWidget->releaseMouse();
-        QMouseEvent *me = static_cast<QMouseEvent *>(event);
-        const QColor color = pickColor(me->globalPos());
-        kDebug() << event->type() << me->globalPos() << color;
-        addColor(color);
-        colorActionTriggered(color);
-    }
-    return Plasma::Applet::eventFilter(watched, event);
-}
-
-QVariant Kolourpicker::itemChange(GraphicsItemChange change, const QVariant &value)
-{
-    if (change == ItemSceneChange) {
-        QMetaObject::invokeMethod(this, "installFilter", Qt::QueuedConnection);
-    }
-    return Plasma::Applet::itemChange(change, value);
-}
-
-void Kolourpicker::grabClicked()
-{
-    if (m_grabWidget) {
-	m_grabWidget->show();
-	m_grabWidget->installEventFilter( this );
-        m_grabWidget->grabMouse(Qt::CrossCursor);
-    }
-}
-
-void Kolourpicker::historyClicked()
-{
-    m_configAndHistoryMenu->popup(QCursor::pos());
-}
-
-void Kolourpicker::colorActionTriggered(const QColor& color)
-{
-    if (!color.isValid()) {
-        return;
-    }
-
-    QMimeData *mime = new QMimeData();
-    mime->setColorData(color);
-
-    QString text;
-    /*
-    converts the color according to the color format choosen by the user
-    */
-    if (m_color_format == "r, g, b") {
-       text = QString("%1, %2, %3").arg(color.red()).arg(color.green()).arg(color.blue());
-    } else if(m_color_format == "#RRGGBB") {
-      text = color.name().toUpper();
-    } else if(m_color_format == "RRGGBB") {
-      text = color.name().toUpper().mid(1);
-    } else if(m_color_format == "#rrggbb") {
-      text = color.name();
-    } else if(m_color_format == "rrggbb") {
-      text = color.name().mid(1);
-    } else if(m_color_format == "Latex") {
-      text = toLatex(color);
-    } else {
-      text = QString("%1, %2, %3").arg(color.red()).arg(color.green()).arg(color.blue());
-    }
-
-    mime->setText(text);
-    QApplication::clipboard()->setMimeData(mime, QClipboard::Clipboard);
-}
-
-QString Kolourpicker::toLatex(const QColor& color)
-{
-      qreal r = (qreal)color.red()/255;
-      qreal g = (qreal)color.green()/255;
-      qreal b = (qreal)color.blue()/255;
-
-      return QString("\\definecolor{ColorName}{rgb}{%1,%2,%3}").arg(r,0,'f',2).arg(g,0,'f',2).arg(b,0,'f',2);
-}
-
-void Kolourpicker::colorActionTriggered(QAction *act)
-{
-    if (!act) {
-        return;
-    }
-
-    QColor color = qvariant_cast<QColor>(act->data());
-    QString text =  act->text().remove('&');
-
-    if(text == i18n("Latex Color")) {
-      text = toLatex(color);
-    }
-
-    QMimeData *mime = new QMimeData();
-    mime->setColorData(color);
-    mime->setText(text);
-    QApplication::clipboard()->setMimeData(mime, QClipboard::Clipboard);
-}
-
-void Kolourpicker::clearHistory(bool save)
-{
-    m_configAndHistory->nativeWidget()->setIcon(ColorIcon(Qt::gray));
-    QHash<QColor, QAction *>::ConstIterator it = m_menus.constBegin(), itEnd = m_menus.constEnd();
-    for (; it != itEnd; ++it ) {
-        m_configAndHistoryMenu->removeAction(*it);
-        delete *it;
-    }
-    m_menus.clear();
-    m_colors.clear();
-
-    if (save) {
-        KConfigGroup cg = config();
-        saveData(cg);
-    }
-}
-
-void Kolourpicker::installFilter()
-{
-    m_grabButton->installSceneEventFilter(this);
-}
-
-void Kolourpicker::addColor(const QColor &color, bool save)
-{
-    QHash<QColor, QAction *>::ConstIterator it = m_menus.constFind(color);
-    if (it != m_menus.constEnd()) {
-        return;
-    }
-
-    KMenu *newmenu = buildMenuForColor(color);
-    QAction *act = newmenu->menuAction();
-    ColorIcon colorIcon(color);
-    act->setIcon(colorIcon);
-    act->setText(QString("%1, %2, %3").arg(color.red()).arg(color.green()).arg(color.blue()));
-    connect(newmenu, SIGNAL(triggered(QAction*)), this, SLOT(colorActionTriggered(QAction*)));
-    m_configAndHistoryMenu->insertMenu(m_configAndHistoryMenu->actions().at(1), newmenu);
-    m_configAndHistory->nativeWidget()->setIcon(colorIcon);
-    m_menus.insert(color, act);
-    m_colors.append(color.name());
-    m_configAndHistory->setEnabled(true);
-    if (save) {
-        KConfigGroup cg = config();
-        saveData(cg);
-    }
-}
-
-void Kolourpicker::saveData(KConfigGroup &cg)
-{
-    cg.writeEntry("Colors", m_colors);
-    cg.writeEntry("ColorFormat", m_color_format);
-    emit configNeedsSaving();
-}
-
diff --git a/applets/kolourpicker/plasma-kolourpicker-default.desktop b/applets/kolourpicker/plasma-kolourpicker-default.desktop
deleted file mode 100644
index 4334ba1..0000000
--- a/applets/kolourpicker/plasma-kolourpicker-default.desktop
+++ /dev/null
@@ -1,130 +0,0 @@
-[Desktop Entry]
-Name=Color Picker
-Name[ar]=ÙÙØªÙ Ø§ÙØ£ÙÙØ§Ù
-Name[bs]=BiraÄ boja
-Name[ca]=Selector de color
-Name[ca@valencia]=Selector de color
-Name[cs]=KapÃ¡tko
-Name[csb]=WrbiÃ©rk farwÃ«
-Name[da]=FarvevÃ¦lger
-Name[de]=Farbauswahl
-Name[el]=ÎÏÎ¹Î»Î¿Î³Î­Î±Ï ÏÏÏÎ¼Î¬ÏÏÎ½
-Name[en_GB]=Colour Picker
-Name[es]=Selector de color
-Name[et]=VÃ¤rvivalija
-Name[eu]=Kolore hautatzailea
-Name[fi]=VÃ¤rivalitsin
-Name[fr]=SÃ©lecteur de couleurs
-Name[ga]=RoghnÃ³ir Dathanna
-Name[gl]=Selector de cores
-Name[he]=×××××¨ ××¦××¢××
-Name[hr]=ObiraÄ boja
-Name[hu]=SzÃ­nvÃ¡lasztÃ³
-Name[is]=LitatÃ­na
-Name[it]=Acchiappa colore
-Name[ja]=ã«ã©ã¼ããã«ã¼
-Name[kk]=Ð¢Ò¯Ñ ÑÐµÑÐ³ÑÑÑ
-Name[km]=á§áááááâáááá¾áâááá
-Name[ko]=ìì ì íê¸°
-Name[ku]=BijarkerÃª RengÃª
-Name[lt]=SpalvÅ³ parinkiklis
-Name[lv]=KrÄsu izvÄlÄtÄjs
-Name[mr]=à¤°à¤à¤ à¤¨à¤¿à¤°à¥à¤µà¤¾à¤à¤
-Name[ms]=Pemungut Warna
-Name[nb]=Fargevelger
-Name[nds]=KlÃ¶Ã¶rkÃ¶Ã¶r
-Name[nl]=Kleurenkiezer
-Name[nn]=Fargeveljar
-Name[pa]=à¨°à©°à¨ à¨à©à¨£à¨à¨¾à¨°
-Name[pl]=WybÃ³r koloru
-Name[pt]=ExtracÃ§Ã£o de Cores
-Name[pt_BR]=Seletor de cores
-Name[ro]=Selector de culori
-Name[ru]=ÐÑÐ±Ð¾Ñ ÑÐ²ÐµÑÐ°
-Name[sk]=VÃ½ber farby
-Name[sl]=Izbirnik barv
-Name[sq]=ZgjedhÃ«s i ngjyrÃ«s
-Name[sr]=Ð±Ð¸ÑÐ°Ñ Ð±Ð¾ÑÐ°
-Name[sr@ijekavian]=Ð±Ð¸ÑÐ°Ñ Ð±Ð¾ÑÐ°
-Name[sr@ijekavianlatin]=biraÄ boja
-Name[sr@latin]=biraÄ boja
-Name[sv]=FÃ¤rghÃ¤mtare
-Name[th]=à¹à¸à¸£à¸·à¹à¸­à¸à¸¡à¸·à¸­à¹à¸¥à¸·à¸­à¸à¸ªà¸µ
-Name[tr]=Renk SeÃ§ici
-Name[ug]=Ø±ÛÚ­ Ø¦Ø§ÙØºÛÚ
-Name[uk]=ÐÑÐ¿ÐµÑÐºÐ°
-Name[wa]=Apiceu d' coleur
-Name[x-test]=xxColor Pickerxx
-Name[zh_CN]=é¢è²æ¾åå¨
-Name[zh_TW]=é¡è²æé¸å¨
-Comment=Pick a color from the desktop
-Comment[ar]=Ø§Ø®ØªØ± ÙÙÙØ§ ÙÙ Ø³Ø·Ø­ Ø§ÙÙÙØªØ¨
-Comment[bs]=Izaberite boju sa povrÅ¡i
-Comment[ca]=Selecciona un color de l'escriptori
-Comment[ca@valencia]=Selecciona un color de l'escriptori
-Comment[cs]=VzÃ­t barvu z plochy
-Comment[csb]=WÃ«biÃ©rzÃ« farwÃ£ z pÃ¹ltu
-Comment[da]=Pluk en farve fra skrivebordet.
-Comment[de]=Farbwerte von einer Stelle auf der ArbeitsflÃ¤che auswÃ¤hlen
-Comment[el]=ÎÏÎ¹Î»Î¿Î³Î® ÎµÎ½ÏÏ ÏÏÏÎ¼Î±ÏÎ¿Ï Î±ÏÏ ÏÎ·Î½ ÎµÏÎ¹ÏÎ¬Î½ÎµÎ¹Î± ÎµÏÎ³Î±ÏÎ¯Î±Ï
-Comment[en_GB]=Pick a colour from the desktop
-Comment[es]=Seleccionar un color del escritorio
-Comment[et]=VÃ¤rvi valimine otse tÃ¶Ã¶laualt
-Comment[eu]=Hartu kolore bat mahaigainetik
-Comment[fi]=Poimi vÃ¤ri tyÃ¶pÃ¶ydÃ¤ltÃ¤
-Comment[fr]=Permet de sÃ©lectionner une couleur depuis votre bureau
-Comment[ga]=Roghnaigh dath Ã³n deasc
-Comment[gl]=Escolle unha cor do escritorio
-Comment[he]=×××¨ ×¦××¢ ××©×××× ××¢××××
-Comment[hr]=Birajte boju s radne povrÅ¡ine
-Comment[hu]=SzÃ­nvÃ¡lasztÃ¡s az asztalrÃ³l
-Comment[is]=Plokkar lit af skjÃ¡borÃ°i
-Comment[it]=Ottieni un colore dal desktop
-Comment[ja]=ãã¹ã¯ãããããè²ãæ¡åãã¾ã
-Comment[kk]=Ð¢Ò¯ÑÑÑ Ò¯ÑÑÐµÐ»Ð´ÐµÐ½ ÑÒ±ÒÑÐ¿ ÑÐµÑÑ ÒÒ±ÑÐ°Ð»Ñ
-Comment[km]=ááâáááâáá¸âáááááá»
-Comment[ko]=ë°ì¤í¬í±ì ìì ê°ì ¸ì¤ê¸°
-Comment[ku]=JÃª sermasÃª rengekÃ® hilbijÃªre
-Comment[lt]=Pasirinkti spalvÄ iÅ¡ darbastalio
-Comment[lv]=Ä»auj izvÄlÄties krÄsu no darbvirsmas
-Comment[mr]=à¤¡à¥à¤¸à¥à¤à¤à¥à¤ª à¤µà¤°à¥à¤² à¤°à¤à¤ à¤¨à¤¿à¤µà¤¡à¤¾
-Comment[nb]=Plukk en farge fra skrivebordet
-Comment[nds]=En KlÃ¶Ã¶r vun den Schriefdisch insammeln
-Comment[nl]=Kies een kleur van het bureaublad
-Comment[nn]=Hent fargar frÃ¥ skrivebordet
-Comment[pa]=à¨¡à©à¨¸à¨à¨à¨¾à¨ª à¨¤à©à¨ à¨°à©°à¨ à¨à©à¨£à©
-Comment[pl]=Wybiera kolory z pulpitu
-Comment[pt]=Escolha uma cor no ambiente de trabalho
-Comment[pt_BR]=Escolha uma cor na Ã¡rea de trabalho
-Comment[ro]=AlegeÈi o culoare de pe birou
-Comment[ru]=ÐÑÐ±Ð¾Ñ ÑÐ²ÐµÑÐ° Ð¸Ð· ÑÐ¾ÑÐºÐ¸ ÑÐ°Ð±Ð¾ÑÐµÐ³Ð¾ ÑÑÐ¾Ð»Ð°
-Comment[sk]=VÃ½ber farby z plochy
-Comment[sl]=Izberite barvo z namizja
-Comment[sr]=ÐÐ·Ð°Ð±ÐµÑÐ¸ÑÐµ Ð±Ð¾ÑÑ ÑÐ° Ð¿Ð¾Ð²ÑÑÐ¸
-Comment[sr@ijekavian]=ÐÐ·Ð°Ð±ÐµÑÐ¸ÑÐµ Ð±Ð¾ÑÑ ÑÐ° Ð¿Ð¾Ð²ÑÑÐ¸
-Comment[sr@ijekavianlatin]=Izaberite boju sa povrÅ¡i
-Comment[sr@latin]=Izaberite boju sa povrÅ¡i
-Comment[sv]=HÃ¤mta en fÃ¤rg frÃ¥n skrivbordet
-Comment[th]=à¹à¸¥à¸·à¸­à¸à¸ªà¸µà¹à¸à¹à¸à¹à¸²à¸¢ à¹ à¸à¹à¸²à¸à¸à¸²à¸à¸à¸·à¹à¸à¸à¸µà¹à¸à¸³à¸à¸²à¸
-Comment[tr]=Ekranda gÃ¶rdÃ¼ÄÃ¼nÃ¼z herhangi bir rengi seÃ§mek iÃ§in
-Comment[uk]=ÐÐ¸Ð±ÑÑ ÐºÐ¾Ð»ÑÐ¾ÑÑ Ð·Ñ ÑÑÑÐ»ÑÐ½Ð¸ÑÑ
-Comment[wa]=Apice ene coleur do scribanne
-Comment[x-test]=xxPick a color from the desktopxx
-Comment[zh_CN]=ä»æ¡é¢æ¾åé¢è²
-Comment[zh_TW]=å¾æ¡é¢ä¸æé¸é¡è²
-Icon=color-picker
-Type=Service
-ServiceTypes=Plasma/Applet
-
-X-KDE-Library=plasma_applet_kolourpicker
-X-KDE-PluginInfo-Author=Pino Toscano
-X-KDE-PluginInfo-Email=pino@kde.org
-X-KDE-PluginInfo-Name=kolourpicker
-X-KDE-PluginInfo-Version=1.0
-X-KDE-PluginInfo-Website=http://userbase.kde.org/Plasma/ColorPicker
-X-KDE-PluginInfo-Category=Graphics
-X-KDE-PluginInfo-Depends=
-X-KDE-PluginInfo-License=GPL
-X-KDE-PluginInfo-EnabledByDefault=true
-X-Plasma-Requires-FileDialog=Unused
-X-Plasma-Requires-LaunchApp=Unused
